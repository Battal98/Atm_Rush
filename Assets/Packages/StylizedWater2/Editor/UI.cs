//Stylized Water 2
//Staggart Creations (http://staggart.xyz)
//Copyright protected under Unity Asset Store EULA

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.AnimatedValues;
using UnityEditor.Rendering;
using UnityEngine;

namespace StylizedWater2
{
    public class UI
    {
        private const string AssetIconData = "";
        private static Texture _AssetIcon;

        public static Texture AssetIcon
        {
            get
            {
                if (_AssetIcon == null) _AssetIcon = CreateIcon(AssetIconData);
                return _AssetIcon;
            }
        }

        private const string WarningIconData = "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";
        public static Texture WarningIcon;
        private const string ErrorIconData = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAD9klEQVR4Ae2bz2vUQBTHJ91S7FZ6EH/VY/GuRy8evHoVWnELgl68eBG8eNhfUPoXeOxB6B5WsGAPpZT+ISK46j/Q7MZiy2q75u04a35MkjeTl7fbrQMhmTcv8973k8nM0E2dQbslrIrj6G9rb+ntVNbVNbueBgPtfTNa6wUy/gdA/LCrfn8w1oo8IAZZoRwBVdHeapBlltSRjEEGgQoAj3gFhRACBQBe8cQQ8gIYj3hCCHkAjFc8EQRbADWWCU+JzDrnmBNsANTE+1Y9Kyf2dksIs4aJ2ou//6AlHq/hlq+PH16L/d0XhrmJ4aiUW+Um9l6TEWAvHrIplz2xs93xr9KPg72OWFjoYgXE/AxHAhZAPvHBLHe2g7Xw9cFeuG5bM4CAAUAnXgnSQaASr2IgIWQBoBevEgxCoBavYiAgpAEoTrxKECAUJV7FyICQBKB48SpBjrOEUNOF0gGYLvFKtdy7xCBEAUyn+BQIs/6uTjXDuR6sTOW1HAmjv1uY7gTtmZydRUeb7OvkRNfnZZ2xCBsfgB/eVQMBSwa+uVz5AHS7NwwyNfE16Dbuygeg55qIMvGNqzKw8AFw3SWxGZpwZZq6H1iePWF7BfQTkwFBtOvJMUxsZYT/vJC+CNf8LnwjAHJ1D+HJfslI+1ZGO2kzLwCvdx0BAHzYCi8AOQKyxLG9/5AIL4AuaiVgWwH4AfRQe4EpBuC6N7PGv9+O8UF0g3PhfQW8LmaCw/jg1CG8eAEcHmKWOIwPQhrOhReA17sWSqu6LquNN0Ez6whwBo8eBoPDhw3Flbm5Y387LHeDnheOs7go688rP0W/Px9uJK+NPnDi2wqDBinsr1KtqEUG8aHAvK8AhIaVoFSKPH7fDiPi9JR1BYB0+AF8/3pHLN/+DcFj5VvnbsxWsIF3DihYjEH3Y5oDDDLkcuWdBLlUGcS58ABmxUolyKs+kV9/BDPMe71SqQe7iK4CjSGQIj+Bede+Ekwgdr1e2xWfP92L2SkMUvzoRxHoUvcKAIQ6RTxtH09XXd+uPzaarpgp6ZdIbWcGRo14uFsHAOxFQ4AY4bLRDNcpa6trNeE4Df8Q0SMJAITng1C0eCES6aYBKBbC200hjo7k8fIV5fP+1xc8+RTx4JgFAHzoRwKIjxZqCAjxkAIGAPjRQdCJhwhQqCAgxUPI6DIItqQCEATBPmE5KcDQ/qt/KbU9q9FAPHTlWPzT1OR+RWIoHgBgXwHwVYXudVA9UpwtxEPYmei6iKw3hAxIkXr+PizFSwD24ZsTASGH+LwA4P7xQsgpngLA+CAQiKcCwA+BSDwlAD4IhOIhaZONEPhnlabvAMe5KTb7gHMjDpPohQfwB63ZMyXk5VWPAAAAAElFTkSuQmCC";
        public static Texture ErrorIcon;
        private const string InfoIconData = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAF4UlEQVR4Ae2aTWicRRjHdzebzSbZUKiKB0FEGnsSvVhREASp1puKRaH1AxUEL35eREm2KQgqgnjTUxU8FLWRFBX8qEEreNKL4MmDIIgULFuSbLLZzfp7Xt+J887Odt9935nZrTowmZnnnY/n/59nnvnYFDc3Nwsuw9bWlsvuevqamprqkeURlPI0/je0/Z8Ax7O4QH9dz1HGcBZcWsAC6/+YM836dBSP4YwEVwQEAa84cUmCCwKCgndNQl4CRgLeJQl5CBgpeFckZCVgMYTDUyAHpXl8QhYCBHx9kFKhv2clYVgCxhK8IjsLCWXVOEXqDXypVPqtUqm8NTExcRY9Njudzk2tVuuFnZ2d+RR6JaoICfF9YSnxoU+hmPIy5A18uVxenZ6evgf9GgCO1IQQSWsbGxtnhIxIOOQfSFikyUAS0hDgDXyxWDxXq9X2o+h5wacIkHwcbltfX/9GFYZN05AwaAl4Ay9gJicnT2CyEfi4XGAZ6Di/o9AiVnRh2nya5RDZWp8OvYKXMQH7kwBWUSwApSN1JE+UNfH3uoikw/8REmjV9+7QjwDv4AVKt9utEiWNogXe9ciqFvlQopgE8Qk9wUZAEPCiCQ7uLvxAod1u9yjGLiDW8FLPh4wC+qrTtIcEk4Bg4AXH9vb2vSRHJW8E8U2v8v0BQ56raCOh2Gg09E7lMSN06LIVniZ+ijVcYNnPA/wI6XUeFSmqvseBAKVLyHSXgEHboE+ldjjw/CJnAZzgHDO+j8GmfQ5o6zs0AWLuX7H/v0+6jEINTnuF2dlZ0a3GGj2O83vGpqgvWTAC2Ot/5GT2HEBWZduzhDWs4FmI2c+ucLfluxeRuQv4GKQL8OPM8gGAr8qhB5CJcWQblIhlSPww8dFzwTcBbS46RwC9APgrwPI4cU7HNDMzU5CzgBb/1L/7zienwu1oHcAfBdhJuj24trb2ASTsAfA5yiv6UJi+XrxKL/jOeyMA8E/g5U8C+o5ms/kx6QxgmljDWR2UzLweqHurXvad90JA/LhxAtA3A2glBi/r+xTvDwkThygd4wS+4JAu8J33QUATp/cioPexxZ1W4AUIxLxtAhLnp4U7qb9XK3vP+iCgyn7+CsfZ+wEjji8KLIefsYZvVVnSeP/fFWEdD+8WAmV8EFDkMPO0qT+z/44pM8p7IE2exoIGHwTYADRZ/++ZHwCsix6kkPvur3eYJh+EAMB/ZDo//ETiQMTyCG7+QlAQAlKY/zyPI0G3P2Ud3gmwOT9egtX4UYrTfCQhCFjwTkCK2S/hCx4KiDkxlG8CrM7P2Ptv5yh8dUKrgAWvBNhOftVqNXoGVxhxjo+q/ChSr7dBCHiXqK65UWqAnMMa7tNlXJVXIOkpXeYz780CuOT8DpgzpvLG3n+Y02L0HCT1qP8Ft8XD7Ag3mO18lb0RAJhP2Ns7uuJi/sh3RdwVHlMFbonfczGSk2CHZfGmkvtO/9HG8UgA/WxAl3uZ6VukjoBn5g9xhN7AIt4IeSYoy4lMC/X4xwNNlCkrj59fmy0Bp4vkZaiNj1jGMp5k3AbL5mVIkHdDbwG8db1z28/juX8d4vDzK4NcowaSZy959ZHIuUCJJa1ASgvgosfrgH9e/+g6H4M/pvdr2wXkPyzqeqVh8+D5gxi98xkPHgV+75ffBAvyHM4OID99X0b+1CjACy4bASLPRQKzerksLd3hSaeWcBBCfoAIr9dgdFlk7MTMK136ESDfM5OAqV9L+4s9bd3I92Vm/nPfp8AY/JIAsgWbDzDrZfIJLIF11vtrWMGX5M8D9EriAXn0UN7fHMh1eRB4GS8NAVIvEwnScFQhDXjR7WJLQNc983LQOwmVTwte9ElLgNS9JEgYBvywBIw9CcOCz0LA2JKQBXxWAhQJsreORcgKXpQfxgeYYJfigU150HIe8KJoHgKk/UhJyAveBQEjI8EFeFcEBCfBFXiXBAQjwSV4UTrtUVjqpgo8bKSql7USBGRtam2X1wlaO72UhP95Av4CjZqRyGFGUGEAAAAASUVORK5CYII=";
        public static Texture InfoIcon;

        public static GUIStyle NotificationArea;
        private static Color RedColor;
        private static Color OrangeColor;

        static UI()
        {
            NotificationArea = new GUIStyle(EditorStyles.label)
            {
                //margin = new RectOffset(15, 0, 15, 0),
                //padding = new RectOffset(5, 5, 5, 5),
                richText = true,
                wordWrap = true,
                clipping = TextClipping.Overflow,
            };
            RedColor = new Color(1f, 0.31f, 0.34f);
            OrangeColor = new Color(1f, 0.68f, 0f);
            
            WarningIcon = CreateIcon(WarningIconData);
            ErrorIcon = CreateIcon(ErrorIconData);
            InfoIcon = CreateIcon(InfoIconData);
        }

        private static Texture CreateIcon(string data)
        {
            byte[] bytes = System.Convert.FromBase64String(data);

            Texture2D icon = new Texture2D(32, 32, TextureFormat.RGBA32, false, false);
            icon.LoadImage(bytes, true);
            
            return icon;
        }
        
        public static string iconPrefix => EditorGUIUtility.isProSkin ? "d_" : "";

        public static void DrawRendererProperty(SerializedProperty property)
        {
            #if URP
            property.serializedObject.Update();
            int selectedRendererOption = property.intValue;
            EditorGUI.BeginChangeCheck();
            
            Rect controlRect = EditorGUILayout.GetControlRect(true);
            EditorGUI.BeginProperty(controlRect, new GUIContent(property.displayName, null, tooltip:property.tooltip), property);
            
            selectedRendererOption = EditorGUI.IntPopup(controlRect, new GUIContent(property.displayName, null, tooltip:property.tooltip), selectedRendererOption, PipelineUtilities.rendererDisplayList,PipelineUtilities.rendererIndexList);
            
            if (EditorGUI.EndChangeCheck())
            {
                //Clamp to valid index
                selectedRendererOption = PipelineUtilities.ValidateRenderer(selectedRendererOption);

                property.intValue = selectedRendererOption;
                property.serializedObject.ApplyModifiedProperties();
            }
            #else
            EditorGUILayout.PropertyField(property);
            #endif
        }

        private static float Sin(float offset = 0f)
        {
            return Mathf.Sin(offset + (float)EditorApplication.timeSinceStartup * Mathf.PI * 2f) * 0.5f + 0.5f;
        }
        
        public static void DrawNotification(string text, MessageType messageType = MessageType.None)
        {
            DrawHelpbox(text, messageType);
        }
        
        public static void DrawNotification(bool condition, string text, string label, Action action, MessageType messageType = MessageType.None)
        {
            DrawHelpbox(text, messageType, condition, label, action);
        }
        
        public static void DrawNotification(bool condition, string text, MessageType messageType = MessageType.None)
        {
            DrawHelpbox(text, messageType, condition, null, null);
        }

        private static void DrawHelpbox(string text, MessageType messageType = MessageType.None, bool condition = true, string buttonLabel = "", Action action = null)
        {
            if (!condition) return;
            
            Rect r = EditorGUILayout.GetControlRect();
            r.width -= 10f;

            Color sideColor = Color.gray;
            Texture icon = null;
            switch (messageType)
            {
                case (MessageType.None):
                    {
                        sideColor = Color.gray;
                    }
                    break;
                case (MessageType.Warning): //Warning
                    {
                        sideColor = Color.Lerp(OrangeColor, OrangeColor * 1.20f, Sin(r.y));
                        icon = WarningIcon;
                    }
                    break;
                case (MessageType.Error): //Error
                    {
                        sideColor = Color.Lerp(RedColor, RedColor * 1.33f, Sin(r.y));
                        icon = ErrorIcon;
                    }
                    break;
                case (MessageType.Info): //Info
                    {
                        sideColor = Color.Lerp(new Color(1f, 1f, 1f), new Color(0.9f, 0.9f, 0.9f), Sin(r.y));
                        icon = InfoIcon;
                    }
                    break;
            }
            
            float width = r.width;
            float height = EditorStyles.helpBox.CalcHeight(new GUIContent(text), EditorGUIUtility.currentViewWidth) + (EditorStyles.label.lineHeight * 1.2f);
            r.height = height;

            Rect btnRect = r;
            GUIContent btnContent = null;
            //Showing a button instead
            if (action != null)
            {
                icon = null;

                btnContent = new GUIContent(" " + buttonLabel, EditorGUIUtility.IconContent("SceneLoadIn").image, "Execute suggested action");
                float size = EditorStyles.toolbarButton.CalcSize(btnContent).x + 5f;
                btnRect.width = size;
                btnRect.x = width - size;
                btnRect.height = EditorStyles.miniButtonMid.fixedHeight+5f;
                //Vertical center
                btnRect.y += (height * 0.5f) - (btnRect.height * 0.5f);
            }

            Rect iconRect = r;
            if (icon != null) 
            {
                float size = Mathf.Min(height * 0.75f, 50f);
                iconRect = r;
                iconRect.x = iconRect.width - size;
                iconRect.width = size;
                iconRect.height = iconRect.width;
                //Vertical center
                iconRect.y += (height * 0.5f) - (iconRect.height * 0.5f);
                
                //Recalculate text height
                height = EditorStyles.helpBox.CalcHeight(new GUIContent(text),
                    EditorGUIUtility.currentViewWidth - size) + (EditorStyles.label.lineHeight * 2f);
                r.height = height;
            }

            float backgroundTint = EditorGUIUtility.isProSkin ? 0.4f : 1f;
            EditorGUI.DrawRect(r, new Color(backgroundTint, backgroundTint, backgroundTint, 0.2f));

            Rect colorRect = r;
            colorRect.width = 7f;

            EditorGUI.DrawRect(colorRect, sideColor);

            Rect textRect = r;
            textRect.x += colorRect.width + 10f;

            //Shrink text area on right side to make room
            if (icon != null) textRect.width -= iconRect.width *2f;
            if(action != null) textRect.width -= btnRect.width *1.5f;

            GUI.Label(textRect, new GUIContent(text), NotificationArea);

            if (icon != null)
            {
                GUI.DrawTexture(iconRect, icon, ScaleMode.ScaleToFit);
            }

            if (action != null)
            {
                if (GUI.Button(btnRect, btnContent))
                {
                    action?.Invoke();
                }
            }

            GUILayout.Space(height - EditorStyles.label.lineHeight); //17=default line height
        }

        public static void DrawFooter()
        {
            GUILayout.Space(5f);

            Rect r = EditorGUILayout.GetControlRect();
            
            if (r.Contains(Event.current.mousePosition))
            {
                EditorGUIUtility.AddCursorRect(new Rect(Event.current.mousePosition.x, Event.current.mousePosition.y, 27, 27), MouseCursor.Link);
            }
            
            if (GUI.Button(r,new GUIContent("- Staggart Creations -", "Open website"), EditorStyles.centeredGreyMiniLabel))
            {
                Application.OpenURL("http://staggart.xyz");
            }

           // GUILayout.Space(-r.height);
        }
        public static class Material
        {
            //Section toggles
            public class Section
            {
                private const float ANIM_SPEED = 16f;
                
                public bool Expanded
                {
                    get { return SessionState.GetBool(id, false); }
                    set { SessionState.SetBool(id, value); }
                }
                public bool showHelp;
                public AnimBool anim;

                public readonly string id;
                public GUIContent title;

                public Section(MaterialEditor owner, string id, GUIContent title)
                {
                    this.id = "SWS2_" + id + "_SECTION";
                    this.title = title;

                    anim = new AnimBool(true);
                    anim.valueChanged.AddListener(owner.Repaint);
                    anim.speed = ANIM_SPEED;
                    anim.target = Expanded;
                }
                
                public void DrawHeader(Action clickAction)
                {
                    UI.Material.DrawHeader(title, Expanded, clickAction);
                    anim.target = Expanded;
                }
            }

            public static void DrawMaterialHeader(MaterialEditor materialEditor, Rect rect, GUIStyle background)
            {
                GUI.DrawTexture(rect, UI.AssetIcon, ScaleMode.ScaleToFit);

                /*
                if (hasError)
                {
                    Rect errorRect = rect;
                    errorRect.width = 15f;
                    errorRect.height = 15f;
                    
                    GUI.DrawTexture(errorRect, UI.ErrorIcon, ScaleMode.ScaleToFit);
                }
                */
                
                GUIContent c = new GUIContent("Version " + AssetInfo.INSTALLED_VERSION);
                rect.width = EditorStyles.miniLabel.CalcSize(c).x + 7f;
                rect.x += EditorGUIUtility.currentViewWidth - (rect.width * 2f);
                rect.y -= 10f;
                GUI.Label(rect, c, EditorStyles.miniLabel);

                rect.x -= 17f;
                rect.y += 8f;
                rect.width = 16f;
                rect.height = 16f;
            
                GUI.DrawTexture(rect, EditorGUIUtility.IconContent("preAudioLoopOff").image);
                if (Event.current.type == EventType.MouseDown)
                {
                    if (rect.Contains(Event.current.mousePosition) && Event.current.button == 0)
                    {
                        AssetInfo.VersionChecking.GetLatestVersionPopup();
                        Event.current.Use();
                    }
                }

                if (rect.Contains(Event.current.mousePosition))
                {
                    Rect tooltipRect = rect;
                    tooltipRect.y -= 20f;
                    tooltipRect.width = 120f;
                    GUI.Label(tooltipRect, "Check for update", GUI.skin.button);
                }
                //TODO: Draw overlay for help button
            }
            
            private const float HeaderHeight = 25f;

            //https://github.com/Unity-Technologies/Graphics/blob/d0473769091ff202422ad13b7b764c7b6a7ef0be/com.unity.render-pipelines.core/Editor/CoreEditorUtils.cs#L460
            public static bool DrawHeader(GUIContent content, bool isExpanded, Action clickAction = null)
            {
#if URP
                CoreEditorUtils.DrawSplitter();
#endif

                Rect backgroundRect = GUILayoutUtility.GetRect(1f, HeaderHeight);

                var labelRect = backgroundRect;
                labelRect.xMin += 8f;
                labelRect.xMax -= 20f + 16 + 5;

                var foldoutRect = backgroundRect;
                foldoutRect.xMin -= 8f;
                foldoutRect.y += 0f;
                foldoutRect.width = HeaderHeight;
                foldoutRect.height = HeaderHeight;

                // Background rect should be full-width
                backgroundRect.xMin = 0f;
                backgroundRect.width += 4f;

                // Background
                float backgroundTint = (EditorGUIUtility.isProSkin ? 0.1f : 1f);
                if (backgroundRect.Contains(Event.current.mousePosition)) backgroundTint *= EditorGUIUtility.isProSkin ? 1.5f : 0.9f;
                
                EditorGUI.DrawRect(backgroundRect, new Color(backgroundTint, backgroundTint, backgroundTint, 0.2f));

                // Title
                EditorGUI.LabelField(labelRect, content, EditorStyles.boldLabel);

                // Foldout
                GUI.Label(foldoutRect, new GUIContent(isExpanded ? "−" : "≡"), EditorStyles.boldLabel);
                
                // Handle events
                var e = Event.current;

                if (e.type == EventType.MouseDown)
                {
                    if (backgroundRect.Contains(e.mousePosition))
                    {
                        if (e.button == 0)
                        {
                            isExpanded = !isExpanded;
                            if(clickAction != null) clickAction.Invoke();
                        }

                        e.Use();
                    }
                }
                
                return isExpanded;
            }

            public static void DrawMinMaxSlider(string label, ref float min, ref float max)
            {
                float minVal = min;
                float maxVal = max;

                using (new EditorGUILayout.HorizontalScope())
                {
                    EditorGUILayout.LabelField(label, GUILayout.MaxWidth(EditorGUIUtility.labelWidth - 30));
                    EditorGUILayout.LabelField(System.Math.Round(minVal, 2).ToString(), GUILayout.Width(75f));
                    EditorGUILayout.MinMaxSlider(ref minVal, ref maxVal, 0f, 500f);
                    EditorGUILayout.LabelField(System.Math.Round(maxVal, 2).ToString(), GUILayout.Width(75f));
                }

                min = minVal;
                max = maxVal;
            }

            public static void DrawIntSlider(MaterialProperty prop, string label = null, string tooltip = null)
            {
                prop.floatValue = (float)EditorGUILayout.IntSlider(new GUIContent(label ?? prop.displayName, null, tooltip), (int)prop.floatValue, (int)prop.rangeLimits.x, (int)prop.rangeLimits.y);

            }

            public static void DrawFloatField(MaterialProperty prop, string label = null, string tooltip = null)
            {
                prop.floatValue = EditorGUILayout.FloatField(new GUIContent(label ?? prop.displayName, null, tooltip), prop.floatValue, GUILayout.MaxWidth(EditorGUIUtility.labelWidth + 50f));
            }

            public static void DrawFloatTicker(MaterialProperty prop, string label = null, string tooltip = null)
            {
                prop.floatValue = m_DrawFloatTicker(prop.floatValue, label ?? prop.displayName, tooltip);
            }
            
            public static float DrawFloatTicker(float value, string label, string tooltip = null)
            {
                return m_DrawFloatTicker(value, label, tooltip);
            }

            private static float m_DrawFloatTicker(float value, string label = null, string tooltip = null)
            {
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.PrefixLabel(new GUIContent(label, null, tooltip));
                if (GUILayout.Button("«", EditorStyles.miniButtonLeft, GUILayout.MaxWidth(20)))
                {
                    value -= 0.1f;
                }
                if (GUILayout.Button("‹", EditorStyles.miniButtonMid, GUILayout.MaxWidth(17)))
                {
                    value -= 0.01f;
                }
                
                value = EditorGUILayout.FloatField(value, GUILayout.MaxWidth(45));

                if (GUILayout.Button("›", EditorStyles.miniButtonMid, GUILayout.MaxWidth(17)))
                {
                    value += 0.01f;
                }
                if (GUILayout.Button("»", EditorStyles.miniButtonRight, GUILayout.MaxWidth(20)))
                {
                    value += 0.1f;
                }
                EditorGUILayout.EndHorizontal();

                return value;
            }

            public static void DrawSlider(MaterialProperty prop, string label = null, string tooltip = null)
            {
                prop.floatValue = EditorGUILayout.Slider(new GUIContent(label ?? prop.displayName, null, tooltip), prop.floatValue, prop.rangeLimits.x, prop.rangeLimits.y);
            }
            
            public static float DrawSlider(float value, string label, string tooltip = null)
            {
                return EditorGUILayout.Slider(new GUIContent(label, null, tooltip), value, 0f, 1f);
            }

            public static void DrawRangeSlider(MaterialProperty prop, float min, float max, string label = null, string tooltip = null)
            {
                float minVal = prop.vectorValue.x;
                float maxVal = prop.vectorValue.y;

                using (new EditorGUILayout.HorizontalScope())
                {
                    EditorGUILayout.LabelField(new GUIContent(label ?? prop.displayName, null, tooltip), GUILayout.MaxWidth(EditorGUIUtility.labelWidth));
                    EditorGUILayout.LabelField(System.Math.Round(minVal, 2).ToString(), GUILayout.Width(40f));
                    EditorGUILayout.MinMaxSlider(ref minVal, ref maxVal, min, max);
                    EditorGUILayout.LabelField(System.Math.Round(maxVal, 2).ToString(), GUILayout.Width(40f));
                }

                prop.vectorValue = new Vector4(minVal, maxVal, prop.vectorValue.z, prop.vectorValue.w);
            }

            public static void Toggle(MaterialProperty prop, string label = null, string tooltip = null)
            {
                prop.floatValue = EditorGUILayout.Toggle(new GUIContent(label ?? prop.displayName, null, tooltip), prop.floatValue == 1f) ? 1f : 0f;
            }

            public static bool Toggle(bool value, string label, string tooltip = null)
            {
                return EditorGUILayout.Toggle(new GUIContent(label, null, tooltip), value);
            }

            public static void DrawColorField(MaterialProperty prop, bool hdr, string name = null, string tooltip = null)
            {
                using (new EditorGUILayout.HorizontalScope())
                {
                    EditorGUILayout.PrefixLabel(new GUIContent(name ?? prop.displayName, tooltip));
                    prop.colorValue = EditorGUILayout.ColorField(new GUIContent("", null, tooltip), prop.colorValue, true, true, hdr, GUILayout.MaxWidth(60f));
                }
            }
            
            public static Vector2 DrawVector2(Vector2 value, string label, string tooltip = null)
            {
                return m_DrawVector2(value, label, tooltip);
            }
            
            public static Vector2 DrawVector2(MaterialProperty prop, string label, string tooltip = null)
            {
                return m_DrawVector2(prop.vectorValue, label ?? prop.displayName, tooltip);
            }

            private static Vector2 m_DrawVector2(Vector2 value, string label, string tooltip = null)
            {
                using (new EditorGUILayout.HorizontalScope())
                {
                    EditorGUILayout.PrefixLabel(new GUIContent(label, tooltip));
                    GUILayout.Space(-15f);
                    value = EditorGUILayout.Vector2Field(new GUIContent("", null, tooltip), value);
                }

                return value;
            }

            public static void DrawVector3(MaterialProperty prop, string name, string tooltip = null)
            {
                using (new EditorGUILayout.HorizontalScope())
                {
                    EditorGUILayout.PrefixLabel(new GUIContent(name, tooltip));
                    GUILayout.Space(-15f);
                    prop.vectorValue = EditorGUILayout.Vector3Field(new GUIContent("", null, tooltip), prop.vectorValue);
                }
            }
        }

        public class Styles
        {
            private static Texture2D _smallGreenDot;
            public static Texture2D SmallGreenDot
            {
                get
                {
                    if (_smallGreenDot == null)
                    {
                        _smallGreenDot = EditorGUIUtility.FindTexture("d_winbtn_mac_max");
                    }

                    return _smallGreenDot;
                }
            }

            private static Texture2D _smallOrangeDot;
            public static Texture2D SmallOrangeDot
            {
                get
                {
                    if (_smallOrangeDot == null)
                    {
                        _smallOrangeDot = EditorGUIUtility.FindTexture("d_winbtn_mac_min");
                    }

                    return _smallOrangeDot;
                }
            }

            private static Texture2D _smallRedDot;
            public static Texture2D SmallRedDot
            {
                get
                {
                    if (_smallRedDot == null)
                    {
                        _smallRedDot = EditorGUIUtility.FindTexture("d_winbtn_mac_close_h");
                    }

                    return _smallRedDot;
                }
            }

            private static GUIStyle _UpdateText;
            public static GUIStyle UpdateText
            {
                get
                {
                    if (_UpdateText == null)
                    {
                        _UpdateText = new GUIStyle("Button")
                        {
                            //fontSize = 10,
                            alignment = TextAnchor.MiddleLeft,
                            stretchWidth = false,
                        };
                    }

                    return _UpdateText;
                }
            }

            private static GUIStyle _Footer;
            public static GUIStyle Footer
            {
                get
                {
                    if (_Footer == null)
                    {
                        _Footer = new GUIStyle(EditorStyles.centeredGreyMiniLabel)
                        {
                            richText = true,
                            alignment = TextAnchor.MiddleCenter,
                            wordWrap = true,
                            fontSize = 12
                        };
                    }

                    return _Footer;
                }
            }

            private static GUIStyle _Button;
            public static GUIStyle Button
            {
                get
                {
                    if (_Button == null)
                    {
                        _Button = new GUIStyle(GUI.skin.button)
                        {
                            alignment = TextAnchor.MiddleLeft,
                            stretchWidth = true,
                            richText = true,
                            wordWrap = true,
                            padding = new RectOffset()
                            {
                                left = 14,
                                right = 14,
                                top = 8,
                                bottom = 8
                            }
                        };
                    }

                    return _Button;
                }
            }

            private static GUIStyle _Header;
            public static GUIStyle Header
            {
                get
                {
                    if (_Header == null)
                    {
                        _Header = new GUIStyle(GUI.skin.label)
                        {
                            richText = true,
                            alignment = TextAnchor.MiddleCenter,
                            wordWrap = true,
                            fontSize = 18,
                            fontStyle = FontStyle.Normal
                        };
                    }

                    return _Header;
                }
            }

            private static GUIStyle _Tab;
            public static GUIStyle Tab
            {
                get
                {
                    if (_Tab == null)
                    {
                        _Tab = new GUIStyle(EditorStyles.miniButtonMid)
                        {
                            alignment = TextAnchor.MiddleCenter,
                            stretchWidth = true,
                            richText = true,
                            wordWrap = true,
                            fontSize = 12,
                            fixedHeight = 27.5f,
                            fontStyle = FontStyle.Bold,
                            padding = new RectOffset()
                            {
                                left = 14,
                                right = 14,
                                top = 8,
                                bottom = 8
                            }
                        };
                    }

                    return _Tab;
                }
            }
        }
    }
}